<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ê•ΩÂô®„Éë„Éº„ÉàË©ï‰æ°„Ç¢„Éó„É™</title>
    <script src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Lucide React „Ç¢„Ç§„Ç≥„É≥Áî®„ÅÆCSS */
        .lucide {
            width: 1em;
            height: 1em;
            stroke: currentColor;
            stroke-width: 2;
            fill: none;
            stroke-linecap: round;
            stroke-linejoin: round;
        }
    </style>
</head>
<body>
    <div id="root"></div>
    
    <script type="text/babel">
        // Lucide React „Ç¢„Ç§„Ç≥„É≥„ÅÆ„Ç≥„É≥„Éù„Éº„Éç„É≥„ÉàÂÆöÁæ©
        const Music = () => (
            <svg className="lucide" viewBox="0 0 24 24">
                <path d="M9 18V5l12-2v13" />
                <circle cx="6" cy="18" r="3" />
                <circle cx="18" cy="16" r="3" />
            </svg>
        );

        const BarChart3 = () => (
            <svg className="lucide" viewBox="0 0 24 24">
                <path d="M3 3v18h18" />
                <path d="M18 17V9" />
                <path d="M13 17V5" />
                <path d="M8 17v-3" />
            </svg>
        );

        const Users = () => (
            <svg className="lucide" viewBox="0 0 24 24">
                <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" />
                <circle cx="9" cy="7" r="4" />
                <path d="M22 21v-2a4 4 0 0 0-3-3.87" />
                <path d="M16 3.13a4 4 0 0 1 0 7.75" />
            </svg>
        );

        const ChevronRight = () => (
            <svg className="lucide" viewBox="0 0 24 24">
                <path d="M9 18l6-6-6-6" />
            </svg>
        );

        const Star = () => (
            <svg className="lucide" viewBox="0 0 24 24">
                <polygon points="12,2 15.09,8.26 22,9.27 17,14.14 18.18,21.02 12,17.77 5.82,21.02 7,14.14 2,9.27 8.91,8.26" />
            </svg>
        );

        const ExternalLink = () => (
            <svg className="lucide" viewBox="0 0 24 24">
                <path d="M15 3h6v6" />
                <path d="M10 14L21 3" />
                <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" />
            </svg>
        );

        const StickyNote = () => (
            <svg className="lucide" viewBox="0 0 24 24">
                <path d="M15.5 3H5a2 2 0 0 0-2 2v14c0 1.1.9 2 2 2h14a2 2 0 0 0 2-2V8.5L15.5 3Z" />
                <path d="M15 3v6h6" />
            </svg>
        );

        const X = () => (
            <svg className="lucide" viewBox="0 0 24 24">
                <path d="M18 6L6 18" />
                <path d="M6 6l12 12" />
            </svg>
        );

        const Save = () => (
            <svg className="lucide" viewBox="0 0 24 24">
                <path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z" />
                <polyline points="17,21 17,13 7,13 7,21" />
                <polyline points="7,3 7,8 15,8" />
            </svg>
        );

        // „Åì„Åì„Å´Êó¢Â≠ò„ÅÆMusicVotingApp„ÅÆ„Ç≥„Éº„Éâ„ÇíË≤º„Çä‰ªò„Åë
        const MusicVotingApp = () => {
            const [currentView, setCurrentView] = React.useState('home');
            const [selectedSong, setSelectedSong] = React.useState(null);
            const [votes, setVotes] = React.useState({});
            const [hasVoted, setHasVoted] = React.useState({});
            const [memos, setMemos] = React.useState({});
            const [showMemoModal, setShowMemoModal] = React.useState(false);
            const [currentMemoSong, setCurrentMemoSong] = React.useState(null);

            // „Éó„É¨„Ç§„É™„Çπ„Éà„ÅÆÊ•ΩÊõ≤
            const songs = [
                { id: 1, title: "Ëº™Ëàû-Revolution-", artist: "Â••‰∫ïÈõÖÁæé", youtubeUrl: "https://youtu.be/Y_0VKKoj-A0" },
                { id: 2, title: "only my Railgun", artist: "fripSide", youtubeUrl: "https://youtu.be/ZhIxg6_Femo" },
                { id: 3, title: "ÂâµÂÇ∑„Ç§„Éé„Çª„É≥„Çπ", artist: "ÂùÇÊú¨ÁúüÁ∂æ", youtubeUrl: "https://youtu.be/SFkLZ0yN3H8" },
                { id: 4, title: "ÊÄ™Áâ©", artist: "YOASOBI", youtubeUrl: "https://youtu.be/dy90tA3TT1c" },
                { id: 5, title: "„ÅÑ„Åë„Å™„ÅÑ„Éú„Éº„ÉÄ„Éº„É©„Ç§„É≥", artist: "„ÉØ„É´„Ç≠„É•„Éº„É¨", youtubeUrl: "https://youtu.be/VSQMQGv8RSg" },
                { id: 6, title: "ÊòüÈñìÈ£õË°å", artist: "‰∏≠Â≥∂ÊÑõ", youtubeUrl: "https://youtu.be/2CnvZOs8TWM" },
                { id: 7, title: "Â∞ÑÊâãÂ∫ßÂçàÂæå9ÊôÇDont be late", artist: "‰∏≠Â≥∂ÊÑõ", youtubeUrl: "https://youtu.be/5sKSCRuKLHo" },
                { id: 8, title: "RESISTER", artist: "ASCA", youtubeUrl: "https://youtu.be/RPZwWt6_unE" },
                { id: 9, title: "unlasting", artist: "LiSA", youtubeUrl: "https://youtu.be/4vvvL8y9VHM" },
                { id: 10, title: "Re:I am", artist: "Aimer", youtubeUrl: "https://youtu.be/ImQSdDX_1K0" },
                { id: 11, title: "„ÅÇ„ÅÆÂ§¢„Çí„Å™„Åû„Å£„Å¶", artist: "YOASOBI", youtubeUrl: "https://youtu.be/AZ8LK6n-is8" },
                { id: 12, title: "„Çµ„É™„Ç∑„Éé„Éè„É©", artist: "„Åø„Åç„Å®P feat.ÂàùÈü≥„Éü„ÇØ", youtubeUrl: "https://youtu.be/Ejc5SXrQvQs" },
                { id: 13, title: "Angel", artist: "Angel Beats!", youtubeUrl: "https://youtu.be/fxpiktN19ho" },
                { id: 14, title: "„É¥„Ç£„É©„É≥", artist: "„Å¶„Å´„Çí„ÅØ", youtubeUrl: "https://youtu.be/p9FJXfGHtDA" },
                { id: 15, title: "ÂãáËÄÖ", artist: "YOASOBI", youtubeUrl: "https://youtu.be/fMRGsM1mPP4" },
                { id: 16, title: "„É™„Ç¢„É©„Ç§„Ç∫", artist: "", youtubeUrl: "https://youtu.be/uaRnwnmqrws" },
                { id: 17, title: "„Ç¢„Ç§„Éâ„É´", artist: "YOASOBI", youtubeUrl: "https://youtu.be/9kluceRt9qg" },
                { id: 18, title: "ÈùíÊò•„Ç≥„É≥„Éó„É¨„ÉÉ„ÇØ„Çπ", artist: "ÁµêÊùü„Éê„É≥„Éâ", youtubeUrl: "https://youtu.be/go_gPlSJpes" },
                { id: 19, title: "POP TEAM EPIC", artist: "‰∏äÂùÇ„Åô„Åø„Çå", youtubeUrl: "https://youtu.be/fO9zdG6DzbY" },
                { id: 20, title: "Magia", artist: "Kalafina", youtubeUrl: "https://youtu.be/ks8WPvlQpbg" },
                { id: 21, title: "„Ç≥„Éç„ÇØ„Éà", artist: "ClariS", youtubeUrl: "https://youtu.be/7EuTPTVpuNI" },
                { id: 22, title: "IGNITE", artist: "Ëóç‰∫ï„Ç®„Ç§„É´", youtubeUrl: "https://youtu.be/hoxUfOTE5II" },
            ];

            const instruments = [
                { id: 'vocal', name: 'sola', icon: 'üé§' },
                { id: 'guitar', name: '„Åó„Åó„Åæ„Çã', icon: 'üé∏' },
                { id: 'bass', name: '„Åæ„Çä', icon: 'üéµ' },
                { id: 'keyboard', name: '„Å™„Åã„Åó„ÇÖ„Çì', icon: 'üéπ' },
                { id: 'drums', name: '„ÅÇ„Å§„Åó„Çì„Åê', icon: 'ü•Å' }
            ];

            const ratings = [
                { symbol: '‚óé', value: 4, color: 'bg-green-500', label: 'ÂæóÊÑèÂàÜÈáé' },
                { symbol: '‚óã', value: 3, color: 'bg-blue-500', label: 'ÊºîÂ•è„Åó„ÇÑ„Åô„ÅÑ' },
                { symbol: '‚ñ≥', value: 2, color: 'bg-yellow-500', label: 'È†ëÂºµ„Çå„Å∞„Å™„Çì„Å®„Åã' },
                { symbol: '‚úñÔ∏è', value: 1, color: 'bg-red-500', label: 'Ëã¶Êâã' }
            ];

            // ÂàùÊúü„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø
            React.useEffect(() => {
                const savedVotes = JSON.parse(localStorage.getItem('musicVotes') || '{}');
                const savedHasVoted = JSON.parse(localStorage.getItem('hasVoted') || '{}');
                const savedMemos = JSON.parse(localStorage.getItem('musicMemos') || '{}');
                setVotes(savedVotes);
                setHasVoted(savedHasVoted);
                setMemos(savedMemos);
            }, []);

            // „É°„É¢„Çí‰øùÂ≠ò„Åô„ÇãÂá¶ÁêÜ
            const saveMemo = (songId, memo) => {
                const newMemos = { ...memos };
                newMemos[songId] = memo;
                setMemos(newMemos);
                localStorage.setItem('musicMemos', JSON.stringify(newMemos));
                setShowMemoModal(false);
                setCurrentMemoSong(null);
            };

            // „É°„É¢„ÇíÊõ¥Êñ∞„Åô„ÇãÂá¶ÁêÜ
            const updateMemo = React.useCallback((songId, text) => {
                const newMemos = { ...memos };
                if (text === '') {
                    delete newMemos[songId];
                } else {
                    newMemos[songId] = text;
                }
                setMemos(newMemos);
                localStorage.setItem('musicMemos', JSON.stringify(newMemos));
            }, [memos]);

            // ÊäïÁ•®„ÇíÂâäÈô§„Åô„ÇãÂá¶ÁêÜ
            const removeVote = (songId, instrument) => {
                const voteKey = `${songId}-${instrument}`;
                const newVotes = { ...votes };
                
                if (newVotes[voteKey] && newVotes[voteKey].count > 0) {
                    newVotes[voteKey].count -= 1;
                    
                    if (newVotes[voteKey].count === 0) {
                        delete newVotes[voteKey];
                    } else {
                        newVotes[voteKey].total = Math.max(1, newVotes[voteKey].total - 2);
                    }
                    
                    setVotes(newVotes);
                    localStorage.setItem('musicVotes', JSON.stringify(newVotes));
                }
                
                const newHasVoted = { ...hasVoted };
                delete newHasVoted[voteKey];
                setHasVoted(newHasVoted);
                localStorage.setItem('hasVoted', JSON.stringify(newHasVoted));
            };

            // ÊäïÁ•®Âá¶ÁêÜ
            const handleVote = (songId, instrument, rating) => {
                const voteKey = `${songId}-${instrument}`;
                const newVotes = { ...votes };
                
                if (!newVotes[voteKey]) {
                    newVotes[voteKey] = { total: 0, count: 0, ratings: { 1: 0, 2: 0, 3: 0, 4: 0 } };
                }
                
                newVotes[voteKey].total += rating;
                newVotes[voteKey].count += 1;
                newVotes[voteKey].ratings[rating] += 1;
                
                setVotes(newVotes);
                localStorage.setItem('musicVotes', JSON.stringify(newVotes));
                
                const newHasVoted = { ...hasVoted };
                newHasVoted[voteKey] = true;
                setHasVoted(newHasVoted);
                localStorage.setItem('hasVoted', JSON.stringify(newHasVoted));
            };

            // Âπ≥ÂùáË©ï‰æ°„ÇíË®àÁÆó
            const getAverageRating = (songId, instrument) => {
                const voteKey = `${songId}-${instrument}`;
                const voteData = votes[voteKey];
                if (!voteData || voteData.count === 0) return 0;
                return (voteData.total / voteData.count).toFixed(1);
            };

            // ÊäïÁ•®Êï∞„ÇíÂèñÂæó
            const getVoteCount = (songId, instrument) => {
                const voteKey = `${songId}-${instrument}`;
                const voteData = votes[voteKey];
                return voteData ? voteData.count : 0;
            };

            // Ë©ï‰æ°ÂàÜÂ∏É„ÇíÂèñÂæó
            const getRatingDistribution = (songId, instrument) => {
                const voteKey = `${songId}-${instrument}`;
                const voteData = votes[voteKey];
                return voteData ? voteData.ratings : { 1: 0, 2: 0, 3: 0, 4: 0 };
            };

            // Êõ≤ÂÖ®‰Ωì„ÅÆ„Çπ„Ç≥„Ç¢„ÇíË®àÁÆó
            const getSongTotalScore = (songId) => {
                let totalScore = 0;
                let totalCount = 0;
                
                instruments.forEach(instrument => {
                    const voteKey = `${songId}-${instrument.id}`;
                    const voteData = votes[voteKey];
                    if (voteData && voteData.count > 0) {
                        totalScore += voteData.total;
                        totalCount += voteData.count;
                    }
                });
                
                return totalCount > 0 ? (totalScore / totalCount).toFixed(1) : 0;
            };

            // Êõ≤„ÅÆÊäïÁ•®ÂÆå‰∫ÜÂ∫¶„ÇíË®àÁÆó
            const getSongCompletionRate = (songId) => {
                let completedInstruments = 0;
                
                instruments.forEach(instrument => {
                    const voteKey = `${songId}-${instrument.id}`;
                    if (hasVoted[voteKey]) {
                        completedInstruments++;
                    }
                });
                
                return Math.round((completedInstruments / instruments.length) * 100);
            };

            // „Éõ„Éº„É†ÁîªÈù¢
            const HomeScreen = () => (
                React.createElement("div", { className: "min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-indigo-700 text-white" },
                    React.createElement("div", { className: "container mx-auto px-4 py-8" },
                        React.createElement("div", { className: "text-center mb-12" },
                            React.createElement(Music, { className: "mx-auto mb-4 text-6xl" }),
                            React.createElement("h1", { className: "text-4xl font-bold mb-4" }, "Ê•ΩÂô®„Éë„Éº„ÉàË©ï‰æ°„Ç¢„Éó„É™"),
                            React.createElement("p", { className: "text-xl opacity-90" }, "„ÅäÊ∞ó„Å´ÂÖ•„Çä„ÅÆÊ•ΩÊõ≤„ÅÆÂêÑ„Éë„Éº„Éà„ÇíË©ï‰æ°„Åó„Çà„ÅÜ"),
                            React.createElement("div", { className: "mt-8 p-4 bg-white/10 rounded-lg max-w-md mx-auto" },
                                React.createElement("p", { className: "text-sm opacity-80" },
                                    "‚ö†Ô∏è „Éá„Éº„Çø‰øùÊåÅ„Å´„Å§„ÅÑ„Å¶:",
                                    React.createElement("br"),
                                    "„Åì„ÅÆ„Ç¢„Éó„É™„ÅØ„Éñ„É©„Ç¶„Ç∂„ÅÆ„É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Çí‰ΩøÁî®„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ",
                                    React.createElement("br"),
                                    "„Ç≠„É£„ÉÉ„Ç∑„É•„ÇØ„É™„Ç¢„ÇÑÂà•„Éñ„É©„Ç¶„Ç∂„Åß„ÅØÊÉÖÂ†±„Åå‰øùÊåÅ„Åï„Çå„Åæ„Åõ„Çì„ÄÇ"
                                )
                            )
                        ),
                        React.createElement("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6 max-w-4xl mx-auto" },
                            React.createElement("button", {
                                onClick: () => setCurrentView('vote'),
                                className: "bg-white/20 backdrop-blur-sm rounded-2xl p-8 hover:bg-white/30 transition-all duration-300 hover:scale-105"
                            },
                                React.createElement(Users, { className: "text-4xl mb-4 mx-auto" }),
                                React.createElement("h2", { className: "text-2xl font-bold mb-2" }, "ÊäïÁ•®„Åô„Çã"),
                                React.createElement("p", { className: "opacity-80" }, "Ê•ΩÊõ≤„ÅÆÂêÑ„Éë„Éº„Éà„ÇíË©ï‰æ°")
                            ),
                            React.createElement("button", {
                                onClick: () => setCurrentView('results'),
                                className: "bg-white/20 backdrop-blur-sm rounded-2xl p-8 hover:bg-white/30 transition-all duration-300 hover:scale-105"
                            },
                                React.createElement(BarChart3, { className: "text-4xl mb-4 mx-auto" }),
                                React.createElement("h2", { className: "text-2xl font-bold mb-2" }, "ÁµêÊûú„ÇíË¶ã„Çã"),
                                React.createElement("p", { className: "opacity-80" }, "ÊäïÁ•®ÁµêÊûú„ÇíÁ¢∫Ë™ç")
                            )
                        )
                    )
                )
            );

            // „É°„É¢„ÉÜ„Ç≠„Çπ„Éà„Ç®„É™„Ç¢„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
            const MemoTextArea = ({ songId, value, onChange }) => {
                const [localValue, setLocalValue] = React.useState(value);
                
                React.useEffect(() => {
                    setLocalValue(value);
                }, [value]);

                const handleChange = (e) => {
                    const newValue = e.target.value;
                    setLocalValue(newValue);
                    
                    // „Éá„Éê„Ç¶„É≥„ÇπÂá¶ÁêÜ
                    const timeoutId = setTimeout(() => {
                        onChange(songId, newValue);
                    }, 300);
                    
                    return () => clearTimeout(timeoutId);
                };

                return React.createElement("textarea", {
                    value: localValue,
                    onChange: handleChange,
                    placeholder: "„Åì„ÅÆÊõ≤„Å´„Å§„ÅÑ„Å¶„ÅÆ„É°„É¢...",
                    className: "w-full h-20 p-2 text-sm border border-gray-300 rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                });
            };

            // ÁúÅÁï•: VotingScreen, ResultsScreen, MemoModal „ÅÆÂÆüË£Ö„ÇÇÂêåÊßò„Å´React.createElement„Çí‰ΩøÁî®

            return React.createElement("div", { className: "font-sans" },
                currentView === 'home' && React.createElement(HomeScreen),
                // ‰ªñ„ÅÆÁîªÈù¢„ÇÇÂêåÊßò„Å´ÂÆüË£Ö
            );
        };

        // „Ç¢„Éó„É™„Çí„É¨„É≥„ÉÄ„É™„É≥„Ç∞
        ReactDOM.render(React.createElement(MusicVotingApp), document.getElementById('root'));
    </script>
</body>
</html>
